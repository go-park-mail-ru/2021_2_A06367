// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels(in *jlexer.Lexer, out *Season) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Num":
			out.Num = int(in.Int())
		case "Src":
			if in.IsNull() {
				in.Skip()
				out.Src = nil
			} else {
				in.Delim('[')
				if out.Src == nil {
					if !in.IsDelim(']') {
						out.Src = make([]string, 0, 4)
					} else {
						out.Src = []string{}
					}
				} else {
					out.Src = (out.Src)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Src = append(out.Src, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Pics":
			if in.IsNull() {
				in.Skip()
				out.Pics = nil
			} else {
				in.Delim('[')
				if out.Pics == nil {
					if !in.IsDelim(']') {
						out.Pics = make([]string, 0, 4)
					} else {
						out.Pics = []string{}
					}
				} else {
					out.Pics = (out.Pics)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Pics = append(out.Pics, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels(out *jwriter.Writer, in Season) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Num\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Num))
	}
	{
		const prefix string = ",\"Src\":"
		out.RawString(prefix)
		if in.Src == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Src {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Pics\":"
		out.RawString(prefix)
		if in.Pics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Pics {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels(l, v)
}
func easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels1(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Genres = append(out.Genres, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "country":
			out.Country = string(in.String())
		case "release_rus":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReleaseRus).UnmarshalJSON(data))
			}
		case "year":
			out.Year = int(in.Int())
		case "director":
			if in.IsNull() {
				in.Skip()
				out.Director = nil
			} else {
				in.Delim('[')
				if out.Director == nil {
					if !in.IsDelim(']') {
						out.Director = make([]string, 0, 4)
					} else {
						out.Director = []string{}
					}
				} else {
					out.Director = (out.Director)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Director = append(out.Director, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authors":
			if in.IsNull() {
				in.Skip()
				out.Authors = nil
			} else {
				in.Delim('[')
				if out.Authors == nil {
					if !in.IsDelim(']') {
						out.Authors = make([]string, 0, 4)
					} else {
						out.Authors = []string{}
					}
				} else {
					out.Authors = (out.Authors)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Authors = append(out.Authors, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]uuid.UUID, 0, 4)
					} else {
						out.Actors = []uuid.UUID{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v10 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v10).UnmarshalText(data))
					}
					out.Actors = append(out.Actors, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "release":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Release).UnmarshalJSON(data))
			}
		case "duration":
			out.Duration = int(in.Int())
		case "language":
			out.Language = string(in.String())
		case "budget":
			out.Budget = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "pic":
			if in.IsNull() {
				in.Skip()
				out.Pic = nil
			} else {
				in.Delim('[')
				if out.Pic == nil {
					if !in.IsDelim(']') {
						out.Pic = make([]string, 0, 4)
					} else {
						out.Pic = []string{}
					}
				} else {
					out.Pic = (out.Pic)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Pic = append(out.Pic, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "src":
			if in.IsNull() {
				in.Skip()
				out.Src = nil
			} else {
				in.Delim('[')
				if out.Src == nil {
					if !in.IsDelim(']') {
						out.Src = make([]string, 0, 4)
					} else {
						out.Src = []string{}
					}
				} else {
					out.Src = (out.Src)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Src = append(out.Src, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "is_series":
			out.IsSeries = bool(in.Bool())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				if out.Seasons == nil {
					out.Seasons = new([]Season)
				}
				if in.IsNull() {
					in.Skip()
					*out.Seasons = nil
				} else {
					in.Delim('[')
					if *out.Seasons == nil {
						if !in.IsDelim(']') {
							*out.Seasons = make([]Season, 0, 1)
						} else {
							*out.Seasons = []Season{}
						}
					} else {
						*out.Seasons = (*out.Seasons)[:0]
					}
					for !in.IsDelim(']') {
						var v13 Season
						(v13).UnmarshalEasyJSON(in)
						*out.Seasons = append(*out.Seasons, v13)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels1(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Genres {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"release_rus\":"
		out.RawString(prefix)
		out.Raw((in.ReleaseRus).MarshalJSON())
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		if in.Director == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Director {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"authors\":"
		out.RawString(prefix)
		if in.Authors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Authors {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Actors {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.RawText((v21).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"release\":"
		out.RawString(prefix)
		out.Raw((in.Release).MarshalJSON())
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"budget\":"
		out.RawString(prefix)
		out.String(string(in.Budget))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"pic\":"
		out.RawString(prefix)
		if in.Pic == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Pic {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix)
		if in.Src == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Src {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_series\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSeries))
	}
	if in.Seasons != nil {
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if *in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range *in.Seasons {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeGithubComGoParkMailRu20212A06367InternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeGithubComGoParkMailRu20212A06367InternalModels1(l, v)
}
