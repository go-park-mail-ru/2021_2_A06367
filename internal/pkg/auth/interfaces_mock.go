// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_A06367/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthUsecase) SignIn(user models.LoginUser) (string, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthUsecaseMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthUsecase)(nil).SignIn), user)
}

// SignUp mocks base method.
func (m *MockAuthUsecase) SignUp(user models.User) (string, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthUsecaseMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthUsecase)(nil).SignUp), user)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockAuthRepo) CheckUser(user models.User) (models.User, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockAuthRepoMockRecorder) CheckUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthRepo)(nil).CheckUser), user)
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(user models.User) (models.User, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), user)
}

// MockOnlineUsecase is a mock of OnlineUsecase interface.
type MockOnlineUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOnlineUsecaseMockRecorder
}

// MockOnlineUsecaseMockRecorder is the mock recorder for MockOnlineUsecase.
type MockOnlineUsecaseMockRecorder struct {
	mock *MockOnlineUsecase
}

// NewMockOnlineUsecase creates a new mock instance.
func NewMockOnlineUsecase(ctrl *gomock.Controller) *MockOnlineUsecase {
	mock := &MockOnlineUsecase{ctrl: ctrl}
	mock.recorder = &MockOnlineUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnlineUsecase) EXPECT() *MockOnlineUsecaseMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockOnlineUsecase) Activate(user models.LoginUser) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockOnlineUsecaseMockRecorder) Activate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockOnlineUsecase)(nil).Activate), user)
}

// Deactivate mocks base method.
func (m *MockOnlineUsecase) Deactivate(user models.LoginUser) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockOnlineUsecaseMockRecorder) Deactivate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockOnlineUsecase)(nil).Deactivate), user)
}

// IsAuthed mocks base method.
func (m *MockOnlineUsecase) IsAuthed(user models.LoginUser) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthed", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthed indicates an expected call of IsAuthed.
func (mr *MockOnlineUsecaseMockRecorder) IsAuthed(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthed", reflect.TypeOf((*MockOnlineUsecase)(nil).IsAuthed), user)
}

// MockOnlineRepo is a mock of OnlineRepo interface.
type MockOnlineRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOnlineRepoMockRecorder
}

// MockOnlineRepoMockRecorder is the mock recorder for MockOnlineRepo.
type MockOnlineRepoMockRecorder struct {
	mock *MockOnlineRepo
}

// NewMockOnlineRepo creates a new mock instance.
func NewMockOnlineRepo(ctrl *gomock.Controller) *MockOnlineRepo {
	mock := &MockOnlineRepo{ctrl: ctrl}
	mock.recorder = &MockOnlineRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnlineRepo) EXPECT() *MockOnlineRepoMockRecorder {
	return m.recorder
}

// IsAuthed mocks base method.
func (m *MockOnlineRepo) IsAuthed(user models.LoginUser) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthed", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthed indicates an expected call of IsAuthed.
func (mr *MockOnlineRepoMockRecorder) IsAuthed(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthed", reflect.TypeOf((*MockOnlineRepo)(nil).IsAuthed), user)
}

// UserOff mocks base method.
func (m *MockOnlineRepo) UserOff(user models.LoginUser) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOff", user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UserOff indicates an expected call of UserOff.
func (mr *MockOnlineRepoMockRecorder) UserOff(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOff", reflect.TypeOf((*MockOnlineRepo)(nil).UserOff), user)
}

// UserOn mocks base method.
func (m *MockOnlineRepo) UserOn(user models.LoginUser) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOn", user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UserOn indicates an expected call of UserOn.
func (mr *MockOnlineRepoMockRecorder) UserOn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOn", reflect.TypeOf((*MockOnlineRepo)(nil).UserOn), user)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenGenerator) GetToken(user models.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", user)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenGeneratorMockRecorder) GetToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenGenerator)(nil).GetToken), user)
}

// MockEncrypter is a mock of Encrypter interface.
type MockEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterMockRecorder
}

// MockEncrypterMockRecorder is the mock recorder for MockEncrypter.
type MockEncrypterMockRecorder struct {
	mock *MockEncrypter
}

// NewMockEncrypter creates a new mock instance.
func NewMockEncrypter(ctrl *gomock.Controller) *MockEncrypter {
	mock := &MockEncrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypter) EXPECT() *MockEncrypterMockRecorder {
	return m.recorder
}

// EncryptPswd mocks base method.
func (m *MockEncrypter) EncryptPswd(pswd string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPswd", pswd)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncryptPswd indicates an expected call of EncryptPswd.
func (mr *MockEncrypterMockRecorder) EncryptPswd(pswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPswd", reflect.TypeOf((*MockEncrypter)(nil).EncryptPswd), pswd)
}
