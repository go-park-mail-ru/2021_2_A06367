// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package actors is a generated GoMock package.
package actors

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_A06367/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockActorsUsecase is a mock of ActorsUsecase interface.
type MockActorsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockActorsUsecaseMockRecorder
}

// MockActorsUsecaseMockRecorder is the mock recorder for MockActorsUsecase.
type MockActorsUsecaseMockRecorder struct {
	mock *MockActorsUsecase
}

// NewMockActorsUsecase creates a new mock instance.
func NewMockActorsUsecase(ctrl *gomock.Controller) *MockActorsUsecase {
	mock := &MockActorsUsecase{ctrl: ctrl}
	mock.recorder = &MockActorsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsUsecase) EXPECT() *MockActorsUsecaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockActorsUsecase) GetById(topic string) ([]models.Actors, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", topic)
	ret0, _ := ret[0].([]models.Actors)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockActorsUsecaseMockRecorder) GetById(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockActorsUsecase)(nil).GetById), topic)
}

// MockActorsRepository is a mock of ActorsRepository interface.
type MockActorsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorsRepositoryMockRecorder
}

// MockActorsRepositoryMockRecorder is the mock recorder for MockActorsRepository.
type MockActorsRepositoryMockRecorder struct {
	mock *MockActorsRepository
}

// NewMockActorsRepository creates a new mock instance.
func NewMockActorsRepository(ctrl *gomock.Controller) *MockActorsRepository {
	mock := &MockActorsRepository{ctrl: ctrl}
	mock.recorder = &MockActorsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsRepository) EXPECT() *MockActorsRepositoryMockRecorder {
	return m.recorder
}

// GetActorById mocks base method.
func (m *MockActorsRepository) GetActorById(topic string) ([]models.Actors, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", topic)
	ret0, _ := ret[0].([]models.Actors)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorsRepositoryMockRecorder) GetActorById(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActorsRepository)(nil).GetActorById), topic)
}
