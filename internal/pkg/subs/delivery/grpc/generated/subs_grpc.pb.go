// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7
//go:generate mockgen -source=subs_grpc.pb.go -destination=./../../../mocks/client_mock.go -package=mocks
// SubsServiceClient is the client API for SubsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubsServiceClient interface {
	GetLicense(ctx context.Context, in *LicenseUUID, opts ...grpc.CallOption) (*License, error)
	SetLicense(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*License, error)
}

type subsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubsServiceClient(cc grpc.ClientConnInterface) SubsServiceClient {
	return &subsServiceClient{cc}
}

func (c *subsServiceClient) GetLicense(ctx context.Context, in *LicenseUUID, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := c.cc.Invoke(ctx, "/SubsService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subsServiceClient) SetLicense(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := c.cc.Invoke(ctx, "/SubsService/SetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubsServiceServer is the server API for SubsService service.
// All implementations must embed UnimplementedSubsServiceServer
// for forward compatibility
type SubsServiceServer interface {
	GetLicense(context.Context, *LicenseUUID) (*License, error)
	SetLicense(context.Context, *LicenseReq) (*License, error)
	mustEmbedUnimplementedSubsServiceServer()
}

// UnimplementedSubsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubsServiceServer struct {
}

func (UnimplementedSubsServiceServer) GetLicense(context.Context, *LicenseUUID) (*License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedSubsServiceServer) SetLicense(context.Context, *LicenseReq) (*License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLicense not implemented")
}
func (UnimplementedSubsServiceServer) mustEmbedUnimplementedSubsServiceServer() {}

// UnsafeSubsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubsServiceServer will
// result in compilation errors.
type UnsafeSubsServiceServer interface {
	mustEmbedUnimplementedSubsServiceServer()
}

func RegisterSubsServiceServer(s grpc.ServiceRegistrar, srv SubsServiceServer) {
	s.RegisterService(&_SubsService_serviceDesc, srv)
}

func _SubsService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubsService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).GetLicense(ctx, req.(*LicenseUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubsService_SetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).SetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubsService/SetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).SetLicense(ctx, req.(*LicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SubsService",
	HandlerType: (*SubsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicense",
			Handler:    _SubsService_GetLicense_Handler,
		},
		{
			MethodName: "SetLicense",
			Handler:    _SubsService_SetLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subs.proto",
}
