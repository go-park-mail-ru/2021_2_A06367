// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_A06367/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSubsUsecase is a mock of SubsUsecase interface.
type MockSubsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSubsUsecaseMockRecorder
}

// MockSubsUsecaseMockRecorder is the mock recorder for MockSubsUsecase.
type MockSubsUsecaseMockRecorder struct {
	mock *MockSubsUsecase
}

// NewMockSubsUsecase creates a new mock instance.
func NewMockSubsUsecase(ctrl *gomock.Controller) *MockSubsUsecase {
	mock := &MockSubsUsecase{ctrl: ctrl}
	mock.recorder = &MockSubsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubsUsecase) EXPECT() *MockSubsUsecaseMockRecorder {
	return m.recorder
}

// GetLicense mocks base method.
func (m *MockSubsUsecase) GetLicense(id uuid.UUID) (models.License, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense", id)
	ret0, _ := ret[0].(models.License)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockSubsUsecaseMockRecorder) GetLicense(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockSubsUsecase)(nil).GetLicense), id)
}

// SetLicense mocks base method.
func (m *MockSubsUsecase) SetLicense(id uuid.UUID, license string) (models.License, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLicense", id, license)
	ret0, _ := ret[0].(models.License)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// SetLicense indicates an expected call of SetLicense.
func (mr *MockSubsUsecaseMockRecorder) SetLicense(id, license interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicense", reflect.TypeOf((*MockSubsUsecase)(nil).SetLicense), id, license)
}
