// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmsServiceClient is the client API for FilmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmsServiceClient interface {
	FilmByGenre(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error)
	FilmBySelection(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error)
	FilmsByActor(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error)
	FilmById(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Film, error)
	FilmsByUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error)
	FilmStartSelection(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error)
	AddStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	RemoveStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	AddWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	RemoveWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	Starred(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error)
	IfStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	WatchList(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error)
	IfWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error)
	Random(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Film, error)
	SetRating(ctx context.Context, in *RatingPair, opts ...grpc.CallOption) (*Nothing, error)
	GetRating(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Film, error)
	GetRatingByUser(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Film, error)
}

type filmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmsServiceClient(cc grpc.ClientConnInterface) FilmsServiceClient {
	return &filmsServiceClient{cc}
}

func (c *filmsServiceClient) FilmByGenre(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) FilmBySelection(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmBySelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) FilmsByActor(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmsByActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) FilmById(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) FilmsByUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) FilmStartSelection(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/FilmStartSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) AddStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/AddStarred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) RemoveStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/RemoveStarred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) AddWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/AddWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) RemoveWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/RemoveWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) Starred(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/Starred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) IfStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/IfStarred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) WatchList(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	out := new(Films)
	err := c.cc.Invoke(ctx, "/FilmsService/WatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) IfWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/IfWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) Random(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/FilmsService/Random", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) SetRating(ctx context.Context, in *RatingPair, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/FilmsService/SetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) GetRating(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/FilmsService/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmsServiceClient) GetRatingByUser(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/FilmsService/GetRatingByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmsServiceServer is the server API for FilmsService service.
// All implementations must embed UnimplementedFilmsServiceServer
// for forward compatibility
type FilmsServiceServer interface {
	FilmByGenre(context.Context, *KeyWord) (*Films, error)
	FilmBySelection(context.Context, *KeyWord) (*Films, error)
	FilmsByActor(context.Context, *UUID) (*Films, error)
	FilmById(context.Context, *UUID) (*Film, error)
	FilmsByUser(context.Context, *UUID) (*Films, error)
	FilmStartSelection(context.Context, *UUID) (*Films, error)
	AddStarred(context.Context, *Pair) (*Nothing, error)
	RemoveStarred(context.Context, *Pair) (*Nothing, error)
	AddWatchList(context.Context, *Pair) (*Nothing, error)
	RemoveWatchList(context.Context, *Pair) (*Nothing, error)
	Starred(context.Context, *UUID) (*Films, error)
	IfStarred(context.Context, *Pair) (*Nothing, error)
	WatchList(context.Context, *UUID) (*Films, error)
	IfWatchList(context.Context, *Pair) (*Nothing, error)
	Random(context.Context, *Nothing) (*Film, error)
	SetRating(context.Context, *RatingPair) (*Nothing, error)
	GetRating(context.Context, *UUID) (*Film, error)
	GetRatingByUser(context.Context, *Pair) (*Film, error)
	mustEmbedUnimplementedFilmsServiceServer()
}

// UnimplementedFilmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilmsServiceServer struct {
}

func (UnimplementedFilmsServiceServer) FilmByGenre(context.Context, *KeyWord) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmByGenre not implemented")
}
func (UnimplementedFilmsServiceServer) FilmBySelection(context.Context, *KeyWord) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmBySelection not implemented")
}
func (UnimplementedFilmsServiceServer) FilmsByActor(context.Context, *UUID) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmsByActor not implemented")
}
func (UnimplementedFilmsServiceServer) FilmById(context.Context, *UUID) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmById not implemented")
}
func (UnimplementedFilmsServiceServer) FilmsByUser(context.Context, *UUID) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmsByUser not implemented")
}
func (UnimplementedFilmsServiceServer) FilmStartSelection(context.Context, *UUID) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmStartSelection not implemented")
}
func (UnimplementedFilmsServiceServer) AddStarred(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStarred not implemented")
}
func (UnimplementedFilmsServiceServer) RemoveStarred(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStarred not implemented")
}
func (UnimplementedFilmsServiceServer) AddWatchList(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWatchList not implemented")
}
func (UnimplementedFilmsServiceServer) RemoveWatchList(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWatchList not implemented")
}
func (UnimplementedFilmsServiceServer) Starred(context.Context, *UUID) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Starred not implemented")
}
func (UnimplementedFilmsServiceServer) IfStarred(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IfStarred not implemented")
}
func (UnimplementedFilmsServiceServer) WatchList(context.Context, *UUID) (*Films, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchList not implemented")
}
func (UnimplementedFilmsServiceServer) IfWatchList(context.Context, *Pair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IfWatchList not implemented")
}
func (UnimplementedFilmsServiceServer) Random(context.Context, *Nothing) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Random not implemented")
}
func (UnimplementedFilmsServiceServer) SetRating(context.Context, *RatingPair) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRating not implemented")
}
func (UnimplementedFilmsServiceServer) GetRating(context.Context, *UUID) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedFilmsServiceServer) GetRatingByUser(context.Context, *Pair) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingByUser not implemented")
}
func (UnimplementedFilmsServiceServer) mustEmbedUnimplementedFilmsServiceServer() {}

// UnsafeFilmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmsServiceServer will
// result in compilation errors.
type UnsafeFilmsServiceServer interface {
	mustEmbedUnimplementedFilmsServiceServer()
}

func RegisterFilmsServiceServer(s grpc.ServiceRegistrar, srv FilmsServiceServer) {
	s.RegisterService(&FilmsService_ServiceDesc, srv)
}

func _FilmsService_FilmByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmByGenre(ctx, req.(*KeyWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_FilmBySelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmBySelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmBySelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmBySelection(ctx, req.(*KeyWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_FilmsByActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmsByActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmsByActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmsByActor(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_FilmById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmById(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_FilmsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmsByUser(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_FilmStartSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).FilmStartSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/FilmStartSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).FilmStartSelection(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_AddStarred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).AddStarred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/AddStarred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).AddStarred(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_RemoveStarred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).RemoveStarred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/RemoveStarred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).RemoveStarred(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_AddWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).AddWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/AddWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).AddWatchList(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_RemoveWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).RemoveWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/RemoveWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).RemoveWatchList(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_Starred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).Starred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/Starred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).Starred(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_IfStarred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).IfStarred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/IfStarred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).IfStarred(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_WatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).WatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/WatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).WatchList(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_IfWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).IfWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/IfWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).IfWatchList(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_Random_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).Random(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/Random",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).Random(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_SetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).SetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/SetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).SetRating(ctx, req.(*RatingPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).GetRating(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmsService_GetRatingByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmsServiceServer).GetRatingByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilmsService/GetRatingByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmsServiceServer).GetRatingByUser(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

// FilmsService_ServiceDesc is the grpc.ServiceDesc for FilmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FilmsService",
	HandlerType: (*FilmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilmByGenre",
			Handler:    _FilmsService_FilmByGenre_Handler,
		},
		{
			MethodName: "FilmBySelection",
			Handler:    _FilmsService_FilmBySelection_Handler,
		},
		{
			MethodName: "FilmsByActor",
			Handler:    _FilmsService_FilmsByActor_Handler,
		},
		{
			MethodName: "FilmById",
			Handler:    _FilmsService_FilmById_Handler,
		},
		{
			MethodName: "FilmsByUser",
			Handler:    _FilmsService_FilmsByUser_Handler,
		},
		{
			MethodName: "FilmStartSelection",
			Handler:    _FilmsService_FilmStartSelection_Handler,
		},
		{
			MethodName: "AddStarred",
			Handler:    _FilmsService_AddStarred_Handler,
		},
		{
			MethodName: "RemoveStarred",
			Handler:    _FilmsService_RemoveStarred_Handler,
		},
		{
			MethodName: "AddWatchList",
			Handler:    _FilmsService_AddWatchList_Handler,
		},
		{
			MethodName: "RemoveWatchList",
			Handler:    _FilmsService_RemoveWatchList_Handler,
		},
		{
			MethodName: "Starred",
			Handler:    _FilmsService_Starred_Handler,
		},
		{
			MethodName: "IfStarred",
			Handler:    _FilmsService_IfStarred_Handler,
		},
		{
			MethodName: "WatchList",
			Handler:    _FilmsService_WatchList_Handler,
		},
		{
			MethodName: "IfWatchList",
			Handler:    _FilmsService_IfWatchList_Handler,
		},
		{
			MethodName: "Random",
			Handler:    _FilmsService_Random_Handler,
		},
		{
			MethodName: "SetRating",
			Handler:    _FilmsService_SetRating_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _FilmsService_GetRating_Handler,
		},
		{
			MethodName: "GetRatingByUser",
			Handler:    _FilmsService_GetRatingByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "films.proto",
}
