// Code generated by MockGen. DO NOT EDIT.
// Source: films_grpc.pb.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFilmsServiceClient is a mock of FilmsServiceClient interface.
type MockFilmsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServiceClientMockRecorder
}

// MockFilmsServiceClientMockRecorder is the mock recorder for MockFilmsServiceClient.
type MockFilmsServiceClientMockRecorder struct {
	mock *MockFilmsServiceClient
}

// NewMockFilmsServiceClient creates a new mock instance.
func NewMockFilmsServiceClient(ctrl *gomock.Controller) *MockFilmsServiceClient {
	mock := &MockFilmsServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilmsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsServiceClient) EXPECT() *MockFilmsServiceClientMockRecorder {
	return m.recorder
}

// FilmByGenre mocks base method.
func (m *MockFilmsServiceClient) FilmByGenre(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmByGenre", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmByGenre indicates an expected call of FilmByGenre.
func (mr *MockFilmsServiceClientMockRecorder) FilmByGenre(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmByGenre", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmByGenre), varargs...)
}

// FilmBySelection mocks base method.
func (m *MockFilmsServiceClient) FilmBySelection(ctx context.Context, in *KeyWord, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmBySelection", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmBySelection indicates an expected call of FilmBySelection.
func (mr *MockFilmsServiceClientMockRecorder) FilmBySelection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmBySelection", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmBySelection), varargs...)
}

// FilmsByActor mocks base method.
func (m *MockFilmsServiceClient) FilmsByActor(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmsByActor", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmsByActor indicates an expected call of FilmsByActor.
func (mr *MockFilmsServiceClientMockRecorder) FilmsByActor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmsByActor", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmsByActor), varargs...)
}

// FilmById mocks base method.
func (m *MockFilmsServiceClient) FilmById(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Film, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmById", varargs...)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmById indicates an expected call of FilmById.
func (mr *MockFilmsServiceClientMockRecorder) FilmById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmById", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmById), varargs...)
}

// FilmsByUser mocks base method.
func (m *MockFilmsServiceClient) FilmsByUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmsByUser", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmsByUser indicates an expected call of FilmsByUser.
func (mr *MockFilmsServiceClientMockRecorder) FilmsByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmsByUser", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmsByUser), varargs...)
}

// FilmStartSelection mocks base method.
func (m *MockFilmsServiceClient) FilmStartSelection(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilmStartSelection", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmStartSelection indicates an expected call of FilmStartSelection.
func (mr *MockFilmsServiceClientMockRecorder) FilmStartSelection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmStartSelection", reflect.TypeOf((*MockFilmsServiceClient)(nil).FilmStartSelection), varargs...)
}

// AddStarred mocks base method.
func (m *MockFilmsServiceClient) AddStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddStarred", varargs...)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStarred indicates an expected call of AddStarred.
func (mr *MockFilmsServiceClientMockRecorder) AddStarred(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStarred", reflect.TypeOf((*MockFilmsServiceClient)(nil).AddStarred), varargs...)
}

// RemoveStarred mocks base method.
func (m *MockFilmsServiceClient) RemoveStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveStarred", varargs...)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStarred indicates an expected call of RemoveStarred.
func (mr *MockFilmsServiceClientMockRecorder) RemoveStarred(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStarred", reflect.TypeOf((*MockFilmsServiceClient)(nil).RemoveStarred), varargs...)
}

// AddWatchList mocks base method.
func (m *MockFilmsServiceClient) AddWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddWatchList", varargs...)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWatchList indicates an expected call of AddWatchList.
func (mr *MockFilmsServiceClientMockRecorder) AddWatchList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatchList", reflect.TypeOf((*MockFilmsServiceClient)(nil).AddWatchList), varargs...)
}

// RemoveWatchList mocks base method.
func (m *MockFilmsServiceClient) RemoveWatchList(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveWatchList", varargs...)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWatchList indicates an expected call of RemoveWatchList.
func (mr *MockFilmsServiceClientMockRecorder) RemoveWatchList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatchList", reflect.TypeOf((*MockFilmsServiceClient)(nil).RemoveWatchList), varargs...)
}

// Starred mocks base method.
func (m *MockFilmsServiceClient) Starred(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Starred", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Starred indicates an expected call of Starred.
func (mr *MockFilmsServiceClientMockRecorder) Starred(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Starred", reflect.TypeOf((*MockFilmsServiceClient)(nil).Starred), varargs...)
}

// IfStarred mocks base method.
func (m *MockFilmsServiceClient) IfStarred(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IfStarred", varargs...)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfStarred indicates an expected call of IfStarred.
func (mr *MockFilmsServiceClientMockRecorder) IfStarred(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfStarred", reflect.TypeOf((*MockFilmsServiceClient)(nil).IfStarred), varargs...)
}

// WatchList mocks base method.
func (m *MockFilmsServiceClient) WatchList(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Films, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchList", varargs...)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchList indicates an expected call of WatchList.
func (mr *MockFilmsServiceClientMockRecorder) WatchList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchList", reflect.TypeOf((*MockFilmsServiceClient)(nil).WatchList), varargs...)
}

// Random mocks base method.
func (m *MockFilmsServiceClient) Random(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Film, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Random", varargs...)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Random indicates an expected call of Random.
func (mr *MockFilmsServiceClientMockRecorder) Random(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockFilmsServiceClient)(nil).Random), varargs...)
}

// MockFilmsServiceServer is a mock of FilmsServiceServer interface.
type MockFilmsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServiceServerMockRecorder
}

// MockFilmsServiceServerMockRecorder is the mock recorder for MockFilmsServiceServer.
type MockFilmsServiceServerMockRecorder struct {
	mock *MockFilmsServiceServer
}

// NewMockFilmsServiceServer creates a new mock instance.
func NewMockFilmsServiceServer(ctrl *gomock.Controller) *MockFilmsServiceServer {
	mock := &MockFilmsServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilmsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsServiceServer) EXPECT() *MockFilmsServiceServerMockRecorder {
	return m.recorder
}

// FilmByGenre mocks base method.
func (m *MockFilmsServiceServer) FilmByGenre(arg0 context.Context, arg1 *KeyWord) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmByGenre", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmByGenre indicates an expected call of FilmByGenre.
func (mr *MockFilmsServiceServerMockRecorder) FilmByGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmByGenre", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmByGenre), arg0, arg1)
}

// FilmBySelection mocks base method.
func (m *MockFilmsServiceServer) FilmBySelection(arg0 context.Context, arg1 *KeyWord) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmBySelection", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmBySelection indicates an expected call of FilmBySelection.
func (mr *MockFilmsServiceServerMockRecorder) FilmBySelection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmBySelection", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmBySelection), arg0, arg1)
}

// FilmsByActor mocks base method.
func (m *MockFilmsServiceServer) FilmsByActor(arg0 context.Context, arg1 *UUID) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmsByActor", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmsByActor indicates an expected call of FilmsByActor.
func (mr *MockFilmsServiceServerMockRecorder) FilmsByActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmsByActor", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmsByActor), arg0, arg1)
}

// FilmById mocks base method.
func (m *MockFilmsServiceServer) FilmById(arg0 context.Context, arg1 *UUID) (*Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmById", arg0, arg1)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmById indicates an expected call of FilmById.
func (mr *MockFilmsServiceServerMockRecorder) FilmById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmById", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmById), arg0, arg1)
}

// FilmsByUser mocks base method.
func (m *MockFilmsServiceServer) FilmsByUser(arg0 context.Context, arg1 *UUID) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmsByUser", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmsByUser indicates an expected call of FilmsByUser.
func (mr *MockFilmsServiceServerMockRecorder) FilmsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmsByUser", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmsByUser), arg0, arg1)
}

// FilmStartSelection mocks base method.
func (m *MockFilmsServiceServer) FilmStartSelection(arg0 context.Context, arg1 *UUID) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmStartSelection", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilmStartSelection indicates an expected call of FilmStartSelection.
func (mr *MockFilmsServiceServerMockRecorder) FilmStartSelection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmStartSelection", reflect.TypeOf((*MockFilmsServiceServer)(nil).FilmStartSelection), arg0, arg1)
}

// AddStarred mocks base method.
func (m *MockFilmsServiceServer) AddStarred(arg0 context.Context, arg1 *Pair) (*Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStarred", arg0, arg1)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStarred indicates an expected call of AddStarred.
func (mr *MockFilmsServiceServerMockRecorder) AddStarred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStarred", reflect.TypeOf((*MockFilmsServiceServer)(nil).AddStarred), arg0, arg1)
}

// RemoveStarred mocks base method.
func (m *MockFilmsServiceServer) RemoveStarred(arg0 context.Context, arg1 *Pair) (*Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStarred", arg0, arg1)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStarred indicates an expected call of RemoveStarred.
func (mr *MockFilmsServiceServerMockRecorder) RemoveStarred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStarred", reflect.TypeOf((*MockFilmsServiceServer)(nil).RemoveStarred), arg0, arg1)
}

// AddWatchList mocks base method.
func (m *MockFilmsServiceServer) AddWatchList(arg0 context.Context, arg1 *Pair) (*Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatchList", arg0, arg1)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWatchList indicates an expected call of AddWatchList.
func (mr *MockFilmsServiceServerMockRecorder) AddWatchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatchList", reflect.TypeOf((*MockFilmsServiceServer)(nil).AddWatchList), arg0, arg1)
}

// RemoveWatchList mocks base method.
func (m *MockFilmsServiceServer) RemoveWatchList(arg0 context.Context, arg1 *Pair) (*Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatchList", arg0, arg1)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWatchList indicates an expected call of RemoveWatchList.
func (mr *MockFilmsServiceServerMockRecorder) RemoveWatchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatchList", reflect.TypeOf((*MockFilmsServiceServer)(nil).RemoveWatchList), arg0, arg1)
}

// Starred mocks base method.
func (m *MockFilmsServiceServer) Starred(arg0 context.Context, arg1 *UUID) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Starred", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Starred indicates an expected call of Starred.
func (mr *MockFilmsServiceServerMockRecorder) Starred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Starred", reflect.TypeOf((*MockFilmsServiceServer)(nil).Starred), arg0, arg1)
}

// IfStarred mocks base method.
func (m *MockFilmsServiceServer) IfStarred(arg0 context.Context, arg1 *Pair) (*Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfStarred", arg0, arg1)
	ret0, _ := ret[0].(*Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfStarred indicates an expected call of IfStarred.
func (mr *MockFilmsServiceServerMockRecorder) IfStarred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfStarred", reflect.TypeOf((*MockFilmsServiceServer)(nil).IfStarred), arg0, arg1)
}

// WatchList mocks base method.
func (m *MockFilmsServiceServer) WatchList(arg0 context.Context, arg1 *UUID) (*Films, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchList", arg0, arg1)
	ret0, _ := ret[0].(*Films)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchList indicates an expected call of WatchList.
func (mr *MockFilmsServiceServerMockRecorder) WatchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchList", reflect.TypeOf((*MockFilmsServiceServer)(nil).WatchList), arg0, arg1)
}

// Random mocks base method.
func (m *MockFilmsServiceServer) Random(arg0 context.Context, arg1 *Nothing) (*Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Random", arg0, arg1)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Random indicates an expected call of Random.
func (mr *MockFilmsServiceServerMockRecorder) Random(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockFilmsServiceServer)(nil).Random), arg0, arg1)
}

// mustEmbedUnimplementedFilmsServiceServer mocks base method.
func (m *MockFilmsServiceServer) mustEmbedUnimplementedFilmsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServiceServer")
}

// mustEmbedUnimplementedFilmsServiceServer indicates an expected call of mustEmbedUnimplementedFilmsServiceServer.
func (mr *MockFilmsServiceServerMockRecorder) mustEmbedUnimplementedFilmsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServiceServer", reflect.TypeOf((*MockFilmsServiceServer)(nil).mustEmbedUnimplementedFilmsServiceServer))
}

// MockUnsafeFilmsServiceServer is a mock of UnsafeFilmsServiceServer interface.
type MockUnsafeFilmsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilmsServiceServerMockRecorder
}

// MockUnsafeFilmsServiceServerMockRecorder is the mock recorder for MockUnsafeFilmsServiceServer.
type MockUnsafeFilmsServiceServerMockRecorder struct {
	mock *MockUnsafeFilmsServiceServer
}

// NewMockUnsafeFilmsServiceServer creates a new mock instance.
func NewMockUnsafeFilmsServiceServer(ctrl *gomock.Controller) *MockUnsafeFilmsServiceServer {
	mock := &MockUnsafeFilmsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilmsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilmsServiceServer) EXPECT() *MockUnsafeFilmsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilmsServiceServer mocks base method.
func (m *MockUnsafeFilmsServiceServer) mustEmbedUnimplementedFilmsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServiceServer")
}

// mustEmbedUnimplementedFilmsServiceServer indicates an expected call of mustEmbedUnimplementedFilmsServiceServer.
func (mr *MockUnsafeFilmsServiceServerMockRecorder) mustEmbedUnimplementedFilmsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServiceServer", reflect.TypeOf((*MockUnsafeFilmsServiceServer)(nil).mustEmbedUnimplementedFilmsServiceServer))
}
