// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package films is a generated GoMock package.
package films

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_A06367/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFilmsUsecase is a mock of FilmsUsecase interface.
type MockFilmsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsUsecaseMockRecorder
}

// MockFilmsUsecaseMockRecorder is the mock recorder for MockFilmsUsecase.
type MockFilmsUsecaseMockRecorder struct {
	mock *MockFilmsUsecase
}

// NewMockFilmsUsecase creates a new mock instance.
func NewMockFilmsUsecase(ctrl *gomock.Controller) *MockFilmsUsecase {
	mock := &MockFilmsUsecase{ctrl: ctrl}
	mock.recorder = &MockFilmsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsUsecase) EXPECT() *MockFilmsUsecaseMockRecorder {
	return m.recorder
}

// GetCompilation mocks base method.
func (m *MockFilmsUsecase) GetCompilation(topic string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilation", topic)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetCompilation indicates an expected call of GetCompilation.
func (mr *MockFilmsUsecaseMockRecorder) GetCompilation(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilation", reflect.TypeOf((*MockFilmsUsecase)(nil).GetCompilation), topic)
}

// GetSelection mocks base method.
func (m *MockFilmsUsecase) GetSelection(selection string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelection", selection)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetSelection indicates an expected call of GetSelection.
func (mr *MockFilmsUsecaseMockRecorder) GetSelection(selection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelection", reflect.TypeOf((*MockFilmsUsecase)(nil).GetSelection), selection)
}

// GetByKeyword mocks base method.
func (m *MockFilmsUsecase) GetByKeyword(keyword string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyword", keyword)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetByKeyword indicates an expected call of GetByKeyword.
func (mr *MockFilmsUsecaseMockRecorder) GetByKeyword(keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyword", reflect.TypeOf((*MockFilmsUsecase)(nil).GetByKeyword), keyword)
}

// GetFilm mocks base method.
func (m *MockFilmsUsecase) GetFilm(film models.Film) (models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", film)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmsUsecaseMockRecorder) GetFilm(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilmsUsecase)(nil).GetFilm), film)
}

// GetFilmsOfActor mocks base method.
func (m *MockFilmsUsecase) GetFilmsOfActor(actor models.Actors) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsOfActor", actor)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsOfActor indicates an expected call of GetFilmsOfActor.
func (mr *MockFilmsUsecaseMockRecorder) GetFilmsOfActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsOfActor", reflect.TypeOf((*MockFilmsUsecase)(nil).GetFilmsOfActor), actor)
}

// GetCompilationForUser mocks base method.
func (m *MockFilmsUsecase) GetCompilationForUser(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationForUser", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetCompilationForUser indicates an expected call of GetCompilationForUser.
func (mr *MockFilmsUsecaseMockRecorder) GetCompilationForUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationForUser", reflect.TypeOf((*MockFilmsUsecase)(nil).GetCompilationForUser), user)
}

// GetStartSelections mocks base method.
func (m *MockFilmsUsecase) GetStartSelections(authorized bool, user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartSelections", authorized, user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetStartSelections indicates an expected call of GetStartSelections.
func (mr *MockFilmsUsecaseMockRecorder) GetStartSelections(authorized, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartSelections", reflect.TypeOf((*MockFilmsUsecase)(nil).GetStartSelections), authorized, user)
}

// GetStarred mocks base method.
func (m *MockFilmsUsecase) GetStarred(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarred", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetStarred indicates an expected call of GetStarred.
func (mr *MockFilmsUsecaseMockRecorder) GetStarred(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarred", reflect.TypeOf((*MockFilmsUsecase)(nil).GetStarred), user)
}

// AddStarred mocks base method.
func (m *MockFilmsUsecase) AddStarred(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStarred", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// AddStarred indicates an expected call of AddStarred.
func (mr *MockFilmsUsecaseMockRecorder) AddStarred(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStarred", reflect.TypeOf((*MockFilmsUsecase)(nil).AddStarred), film, user)
}

// RemoveStarred mocks base method.
func (m *MockFilmsUsecase) RemoveStarred(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStarred", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// RemoveStarred indicates an expected call of RemoveStarred.
func (mr *MockFilmsUsecaseMockRecorder) RemoveStarred(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStarred", reflect.TypeOf((*MockFilmsUsecase)(nil).RemoveStarred), film, user)
}

// GetWatchlist mocks base method.
func (m *MockFilmsUsecase) GetWatchlist(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlist", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetWatchlist indicates an expected call of GetWatchlist.
func (mr *MockFilmsUsecaseMockRecorder) GetWatchlist(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlist", reflect.TypeOf((*MockFilmsUsecase)(nil).GetWatchlist), user)
}

// AddWatchlist mocks base method.
func (m *MockFilmsUsecase) AddWatchlist(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatchlist", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// AddWatchlist indicates an expected call of AddWatchlist.
func (mr *MockFilmsUsecaseMockRecorder) AddWatchlist(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatchlist", reflect.TypeOf((*MockFilmsUsecase)(nil).AddWatchlist), film, user)
}

// RemoveWatchlist mocks base method.
func (m *MockFilmsUsecase) RemoveWatchlist(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatchlist", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// RemoveWatchlist indicates an expected call of RemoveWatchlist.
func (mr *MockFilmsUsecaseMockRecorder) RemoveWatchlist(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatchlist", reflect.TypeOf((*MockFilmsUsecase)(nil).RemoveWatchlist), film, user)
}

// Randomize mocks base method.
func (m *MockFilmsUsecase) Randomize() (models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Randomize")
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// Randomize indicates an expected call of Randomize.
func (mr *MockFilmsUsecaseMockRecorder) Randomize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Randomize", reflect.TypeOf((*MockFilmsUsecase)(nil).Randomize))
}

// MockFilmsRepository is a mock of FilmsRepository interface.
type MockFilmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsRepositoryMockRecorder
}

// MockFilmsRepositoryMockRecorder is the mock recorder for MockFilmsRepository.
type MockFilmsRepositoryMockRecorder struct {
	mock *MockFilmsRepository
}

// NewMockFilmsRepository creates a new mock instance.
func NewMockFilmsRepository(ctrl *gomock.Controller) *MockFilmsRepository {
	mock := &MockFilmsRepository{ctrl: ctrl}
	mock.recorder = &MockFilmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsRepository) EXPECT() *MockFilmsRepositoryMockRecorder {
	return m.recorder
}

// GetFilmsByTopic mocks base method.
func (m *MockFilmsRepository) GetFilmsByTopic(topic string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByTopic", topic)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsByTopic indicates an expected call of GetFilmsByTopic.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmsByTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByTopic", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmsByTopic), topic)
}

// GetHottestFilms mocks base method.
func (m *MockFilmsRepository) GetHottestFilms() ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHottestFilms")
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetHottestFilms indicates an expected call of GetHottestFilms.
func (mr *MockFilmsRepositoryMockRecorder) GetHottestFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHottestFilms", reflect.TypeOf((*MockFilmsRepository)(nil).GetHottestFilms))
}

// GetNewestFilms mocks base method.
func (m *MockFilmsRepository) GetNewestFilms() ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewestFilms")
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetNewestFilms indicates an expected call of GetNewestFilms.
func (mr *MockFilmsRepositoryMockRecorder) GetNewestFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewestFilms", reflect.TypeOf((*MockFilmsRepository)(nil).GetNewestFilms))
}

// GetFilmsByKeyword mocks base method.
func (m *MockFilmsRepository) GetFilmsByKeyword(keyword string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByKeyword", keyword)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsByKeyword indicates an expected call of GetFilmsByKeyword.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmsByKeyword(keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByKeyword", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmsByKeyword), keyword)
}

// GetFilmById mocks base method.
func (m *MockFilmsRepository) GetFilmById(film models.Film) (models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmById", film)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmById indicates an expected call of GetFilmById.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmById(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmById", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmById), film)
}

// GetFilmsByActor mocks base method.
func (m *MockFilmsRepository) GetFilmsByActor(actor models.Actors) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByActor", actor)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsByActor indicates an expected call of GetFilmsByActor.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmsByActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByActor", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmsByActor), actor)
}

// GetFilmsByUser mocks base method.
func (m *MockFilmsRepository) GetFilmsByUser(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByUser", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsByUser indicates an expected call of GetFilmsByUser.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmsByUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByUser", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmsByUser), user)
}

// GetStarredFilms mocks base method.
func (m *MockFilmsRepository) GetStarredFilms(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredFilms", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetStarredFilms indicates an expected call of GetStarredFilms.
func (mr *MockFilmsRepositoryMockRecorder) GetStarredFilms(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredFilms", reflect.TypeOf((*MockFilmsRepository)(nil).GetStarredFilms), user)
}

// InsertStarred mocks base method.
func (m *MockFilmsRepository) InsertStarred(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStarred", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// InsertStarred indicates an expected call of InsertStarred.
func (mr *MockFilmsRepositoryMockRecorder) InsertStarred(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStarred", reflect.TypeOf((*MockFilmsRepository)(nil).InsertStarred), film, user)
}

// DeleteStarred mocks base method.
func (m *MockFilmsRepository) DeleteStarred(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStarred", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// DeleteStarred indicates an expected call of DeleteStarred.
func (mr *MockFilmsRepositoryMockRecorder) DeleteStarred(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStarred", reflect.TypeOf((*MockFilmsRepository)(nil).DeleteStarred), film, user)
}

// GetWatchlistFilms mocks base method.
func (m *MockFilmsRepository) GetWatchlistFilms(user models.User) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlistFilms", user)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetWatchlistFilms indicates an expected call of GetWatchlistFilms.
func (mr *MockFilmsRepositoryMockRecorder) GetWatchlistFilms(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlistFilms", reflect.TypeOf((*MockFilmsRepository)(nil).GetWatchlistFilms), user)
}

// InsertWatchlist mocks base method.
func (m *MockFilmsRepository) InsertWatchlist(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWatchlist", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// InsertWatchlist indicates an expected call of InsertWatchlist.
func (mr *MockFilmsRepositoryMockRecorder) InsertWatchlist(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWatchlist", reflect.TypeOf((*MockFilmsRepository)(nil).InsertWatchlist), film, user)
}

// DeleteWatchlist mocks base method.
func (m *MockFilmsRepository) DeleteWatchlist(film models.Film, user models.User) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWatchlist", film, user)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// DeleteWatchlist indicates an expected call of DeleteWatchlist.
func (mr *MockFilmsRepositoryMockRecorder) DeleteWatchlist(film, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWatchlist", reflect.TypeOf((*MockFilmsRepository)(nil).DeleteWatchlist), film, user)
}

// GetRandom mocks base method.
func (m *MockFilmsRepository) GetRandom() (models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom")
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockFilmsRepositoryMockRecorder) GetRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockFilmsRepository)(nil).GetRandom))
}
