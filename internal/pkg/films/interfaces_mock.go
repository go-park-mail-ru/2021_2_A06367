// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package films is a generated GoMock package.
package films

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_A06367/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFilmsUsecase is a mock of FilmsUsecase interface.
type MockFilmsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsUsecaseMockRecorder
}

// MockFilmsUsecaseMockRecorder is the mock recorder for MockFilmsUsecase.
type MockFilmsUsecaseMockRecorder struct {
	mock *MockFilmsUsecase
}

// NewMockFilmsUsecase creates a new mock instance.
func NewMockFilmsUsecase(ctrl *gomock.Controller) *MockFilmsUsecase {
	mock := &MockFilmsUsecase{ctrl: ctrl}
	mock.recorder = &MockFilmsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsUsecase) EXPECT() *MockFilmsUsecaseMockRecorder {
	return m.recorder
}

// GetCompilation mocks base method.
func (m *MockFilmsUsecase) GetCompilation(topic string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilation", topic)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetCompilation indicates an expected call of GetCompilation.
func (mr *MockFilmsUsecaseMockRecorder) GetCompilation(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilation", reflect.TypeOf((*MockFilmsUsecase)(nil).GetCompilation), topic)
}

// MockFilmsRepository is a mock of FilmsRepository interface.
type MockFilmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsRepositoryMockRecorder
}

// MockFilmsRepositoryMockRecorder is the mock recorder for MockFilmsRepository.
type MockFilmsRepositoryMockRecorder struct {
	mock *MockFilmsRepository
}

// NewMockFilmsRepository creates a new mock instance.
func NewMockFilmsRepository(ctrl *gomock.Controller) *MockFilmsRepository {
	mock := &MockFilmsRepository{ctrl: ctrl}
	mock.recorder = &MockFilmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsRepository) EXPECT() *MockFilmsRepositoryMockRecorder {
	return m.recorder
}

// GetFilmsByTopic mocks base method.
func (m *MockFilmsRepository) GetFilmsByTopic(topic string) ([]models.Film, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByTopic", topic)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetFilmsByTopic indicates an expected call of GetFilmsByTopic.
func (mr *MockFilmsRepositoryMockRecorder) GetFilmsByTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByTopic", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmsByTopic), topic)
}
